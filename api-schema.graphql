# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AppConfig {
  authGithubEnabled: Boolean!
  authPasswordEnabled: Boolean!
  authRegisterEnabled: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Identity {
  createdAt: DateTime!
  expired: Boolean
  id: String!
  name: String
  owner: User
  profile: JSON
  provider: IdentityProvider!
  providerId: String!
  updatedAt: DateTime!
  url: String
  verified: Boolean
}

input IdentityAdminCreateInput {
  ownerId: String!
  provider: IdentityProvider!
  providerId: String!
}

input IdentityAdminFindManyInput {
  ownerId: String
  provider: IdentityProvider
}

enum IdentityProvider {
  GitHub
}

input IdentityUserFindManyInput {
  username: String!
}

type Index {
  address: String!
  cluster: NetworkCluster!
  createdAt: DateTime
  data: JSON
  dataHash: String
  id: String!
  label: String
  program: String!
  type: IndexType!
  updatedAt: DateTime
}

input IndexAdminCreateInput {
  address: String!
  cluster: NetworkCluster!
  label: String
  type: IndexType!
}

input IndexAdminFindManyInput {
  cluster: NetworkCluster
  limit: Int = 10
  page: Int = 1
  search: String
  type: IndexType
}

input IndexAdminResolveInput {
  address: String!
  cluster: NetworkCluster!
}

input IndexAdminUpdateInput {
  label: String
}

type IndexEntry {
  address: String!
  amount: String!
  cluster: NetworkCluster!
  createdAt: DateTime
  data: JSON
  dataHash: String
  id: String!
  indexAddress: String!
  label: String
  program: String!
  updatedAt: DateTime
  walletId: String!
}

input IndexEntryAdminFindManyInput {
  cluster: NetworkCluster!
  indexAddress: String!
  limit: Int = 10
  page: Int = 1
  search: String
}

type IndexEntryPaging {
  data: [IndexEntry!]!
  meta: PagingMeta!
}

input IndexEntryUserFindManyInput {
  cluster: NetworkCluster!
  indexAddress: String!
  limit: Int = 10
  page: Int = 1
  search: String
}

type IndexPaging {
  data: [Index!]!
  meta: PagingMeta!
}

enum IndexType {
  SolanaCollection
  SolanaMint
}

input IndexUserFindManyInput {
  cluster: NetworkCluster
  limit: Int = 10
  page: Int = 1
  search: String
  type: IndexType
}

type IndexWallet {
  createdAt: DateTime
  id: String!
  index: Index
  indexId: String!
  updatedAt: DateTime
  wallet: Wallet
  walletId: String!
}

input IndexWalletAdminFindManyInput {
  limit: Int = 10
  page: Int = 1
  search: String
  walletId: String!
}

input IndexWalletAdminUpdateInput {
  updatedAt: String
}

type IndexWalletPaging {
  data: [IndexWallet!]!
  meta: PagingMeta!
}

input IndexWalletUserFindManyInput {
  limit: Int = 10
  page: Int = 1
  search: String
  walletId: String!
}

input IndexWalletUserUpdateInput {
  updatedAt: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LoginInput {
  password: String!
  username: String!
}

type Mutation {
  adminCreateIdentity(input: IdentityAdminCreateInput!): Identity
  adminCreateIndex(input: IndexAdminCreateInput!): Index
  adminCreateUser(input: UserAdminCreateInput!): User
  adminCreateWallet(input: WalletAdminCreateInput!): Wallet
  adminDeleteIdentity(identityId: String!): Boolean
  adminDeleteIndex(indexId: String!): Boolean
  adminDeleteIndexEntry(indexEntryId: String!): Boolean
  adminDeleteIndexWallet(indexWalletId: String!): Boolean
  adminDeleteUser(userId: String!): Boolean
  adminDeleteWallet(walletId: String!): Boolean
  adminUpdateIndex(indexId: String!, input: IndexAdminUpdateInput!): Index
  adminUpdateIndexWallet(indexWalletId: String!, input: IndexWalletAdminUpdateInput!): IndexWallet
  adminUpdateUser(input: UserAdminUpdateInput!, userId: String!): User
  adminUpdateWallet(input: WalletAdminUpdateInput!, walletId: String!): Wallet
  login(input: LoginInput!): User
  logout: Boolean
  register(input: RegisterInput!): User
  userCreateWallet(input: WalletUserCreateInput!): Wallet
  userDeleteIdentity(identityId: String!): Boolean
  userDeleteIndexWallet(indexWalletId: String!): Boolean
  userDeleteWallet(walletId: String!): Boolean
  userUpdateIndexWallet(indexWalletId: String!, input: IndexWalletUserUpdateInput!): IndexWallet
  userUpdateUser(input: UserUserUpdateInput!): User
  userUpdateWallet(input: WalletUserUpdateInput!, walletId: String!): Wallet
}

enum NetworkCluster {
  SolanaCustom
  SolanaDevnet
  SolanaMainnet
  SolanaTestnet
}

type PagingMeta {
  currentPage: Int!
  isFirstPage: Boolean!
  isLastPage: Boolean!
  nextPage: Int
  pageCount: Int
  previousPage: Int
  totalCount: Int
}

type Query {
  adminFindManyIdentity(input: IdentityAdminFindManyInput!): [Identity!]
  adminFindManyIndex(input: IndexAdminFindManyInput!): IndexPaging!
  adminFindManyIndexEntry(input: IndexEntryAdminFindManyInput!): IndexEntryPaging!
  adminFindManyIndexWallet(input: IndexWalletAdminFindManyInput!): IndexWalletPaging!
  adminFindManyUser(input: UserAdminFindManyInput!): UserPaging!
  adminFindManyWallet(input: WalletAdminFindManyInput!): WalletPaging!
  adminFindOneIndex(indexId: String!): Index
  adminFindOneIndexEntry(indexEntryId: String!): IndexEntry
  adminFindOneIndexWallet(indexWalletId: String!): IndexWallet
  adminFindOneUser(userId: String!): User
  adminFindOneWallet(walletId: String!): Wallet
  adminGetAccountInfo(input: IndexAdminResolveInput!): JSON
  adminResolveIndex(input: IndexAdminResolveInput!): JSON
  adminResolveWallet(input: IndexAdminResolveInput!, wallet: String!): JSON
  appConfig: AppConfig!
  me: User
  uptime: Float!
  userFindManyIdentity(input: IdentityUserFindManyInput!): [Identity!]
  userFindManyIndex(input: IndexUserFindManyInput!): IndexPaging!
  userFindManyIndexEntry(input: IndexEntryUserFindManyInput!): IndexEntryPaging!
  userFindManyIndexWallet(input: IndexWalletUserFindManyInput!): IndexWalletPaging!
  userFindManyUser(input: UserUserFindManyInput!): UserPaging!
  userFindManyWallet(input: WalletUserFindManyInput!): WalletPaging!
  userFindOneIndex(indexId: String!): Index
  userFindOneIndexEntry(indexEntryId: String!): IndexEntry
  userFindOneIndexWallet(indexWalletId: String!): IndexWallet
  userFindOneUser(username: String!): User
  userFindOneWallet(walletId: String!): Wallet
}

input RegisterInput {
  password: String!
  username: String!
}

type User {
  avatarUrl: String
  createdAt: DateTime
  developer: Boolean
  id: String!
  identities: [Identity!]
  name: String
  profileUrl: String!
  role: UserRole
  status: UserStatus
  updatedAt: DateTime
  username: String
}

input UserAdminCreateInput {
  password: String
  username: String!
}

input UserAdminFindManyInput {
  limit: Int = 10
  page: Int = 1
  role: UserRole
  search: String
  status: UserStatus
}

input UserAdminUpdateInput {
  avatarUrl: String
  developer: Boolean
  name: String
  role: UserRole
  status: UserStatus
  username: String
}

type UserPaging {
  data: [User!]!
  meta: PagingMeta!
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}

input UserUserFindManyInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input UserUserUpdateInput {
  avatarUrl: String
  developer: Boolean
  name: String
}

type Wallet {
  createdAt: DateTime
  id: String!
  label: String!
  updatedAt: DateTime
}

input WalletAdminCreateInput {
  id: String!
  label: String
}

input WalletAdminFindManyInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input WalletAdminUpdateInput {
  label: String
}

type WalletPaging {
  data: [Wallet!]!
  meta: PagingMeta!
}

input WalletUserCreateInput {
  id: String!
  label: String
}

input WalletUserFindManyInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input WalletUserUpdateInput {
  label: String
}
