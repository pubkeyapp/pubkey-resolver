generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Identity {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  provider     IdentityProvider
  providerId   String
  name         String?
  accessToken  String? /// @encrypted
  refreshToken String? /// @encrypted
  profile      Json?
  verified     Boolean          @default(false)
  owner        User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String

  @@unique([provider, providerId])
}

model Index {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  type      IndexType
  cluster   NetworkCluster
  program   String
  address   String
  data      Json?
  dataHash  String?
  label     String?
  entries   IndexEntry[]

  @@unique([address, cluster])
}

model IndexEntry {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  index        Index          @relation(fields: [indexAddress, cluster], references: [address, cluster], onDelete: Cascade, onUpdate: Cascade)
  indexAddress String
  cluster      NetworkCluster
  program      String
  address      String
  wallet       String
  data         Json?
  dataHash     String?
  label        String?
}

model User {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  avatarUrl  String?
  developer  Boolean    @default(false)
  name       String?
  password   String? /// @encrypted
  role       UserRole   @default(User)
  status     UserStatus @default(Created)
  username   String     @unique
  identities Identity[]
}

enum IdentityProvider {
  GitHub
}

enum IndexType {
  SolanaCollection
  SolanaMint
}

enum NetworkCluster {
  SolanaCustom
  SolanaDevnet
  SolanaMainnet
  SolanaTestnet
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}
